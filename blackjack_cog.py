# ==============================================================================
# File: blackjack_cog.py
# M√¥ t·∫£: L·ªõp Framework - ƒê√¢y l√† n∆°i code t∆∞∆°ng t√°c tr·ª±c ti·∫øp v·ªõi discord.py.
# N√≥ s·ª≠ d·ª•ng Use Cases ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông v√† Presenter ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£.
# ==============================================================================
import discord
from discord.ext import commands
from blackjack.use_cases import GameUseCase
from blackjack.adapters.discord_presenter import DiscordPresenter
from blackjack.entities import GameState
import asyncio
from settings import WAITING_ROOM_TIMEOUT, COMMAND_PREFIX
import logging
from datetime import datetime


class BlackjackCog(commands.Cog):
    """M·ªôt Cog ch·ª©a c√°c l·ªánh ƒë·ªÉ ch∆°i game X√¨ D√°ch."""

    def __init__(
        self, bot: commands.Bot, use_case: GameUseCase, presenter: DiscordPresenter
    ):
        self.bot = bot
        self.use_case = use_case
        self.presenter = presenter
        # L∆∞u tr·ªØ ng∆∞·ªùi kh·ªüi t·∫°o ph√≤ng ch·ªù ƒë·ªÉ ch·ªâ h·ªç c√≥ quy·ªÅn b·∫Øt ƒë·∫ßu
        self.game_starters = {}
        # L∆∞u tr·ªØ task timeout cho t·ª´ng ph√≤ng ch·ªù
        self.waiting_room_timeouts = {}  # channel_id: asyncio.Task
        self.logger = logging.getLogger("blackjack-bot.cog")

    async def _waiting_room_timeout(self, channel_id: int, ctx: commands.Context):
        await asyncio.sleep(WAITING_ROOM_TIMEOUT)  # timeout l·∫•y t·ª´ settings
        game = self.use_case.repo.get_game(channel_id)
        if (
            game
            and game.state == GameState.WAITING_FOR_PLAYERS
            and len(game.players) <= 1
        ):
            self.logger.info(f"Timeout ph√≤ng ch·ªù channel {channel_id}, t·ª± ƒë·ªông ƒë√≥ng.")
            self.use_case.end_game(channel_id)
            if channel_id in self.game_starters:
                del self.game_starters[channel_id]
            await ctx.send(
                "‚è∞ Ph√≤ng ch·ªù ƒë√£ b·ªã ƒë√≥ng do kh√¥ng c√≥ ai tham gia sau 5 ph√∫t."
            )
        self.waiting_room_timeouts.pop(channel_id, None)

    async def _check_dm_permission(self, user_id: int) -> bool:
        """Ki·ªÉm tra xem c√≥ th·ªÉ g·ª≠i DM cho user kh√¥ng."""
        try:
            user = await self.bot.fetch_user(user_id)
            # Th·ª≠ g·ª≠i m·ªôt tin nh·∫Øn test ƒë·ªÉ ki·ªÉm tra
            current_date = datetime.now().strftime("%d/%m/%Y")

            test_embed = discord.Embed(
                title="üéÆ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi X√¨ D√°ch Bot!",
                description=f"Xin ch√†o! ƒê√¢y l√† tin nh·∫Øn ki·ªÉm tra ƒë·ªÉ ƒë·∫£m b·∫£o bot c√≥ th·ªÉ g·ª≠i th√¥ng tin game cho b·∫°n.\n\nüìÖ Ng√†y: {current_date}\nüé≤ S·∫µn s√†ng ch∆°i X√¨ D√°ch ch∆∞a?",
                color=discord.Color.green(),
            )
            test_embed.set_footer(
                text="Bot s·∫Ω g·ª≠i th√¥ng tin b√†i c·ªßa b·∫°n qua ƒë√¢y trong khi ch∆°i!"
            )
            await user.send(embed=test_embed)
            return True
        except discord.Forbidden:
            # User ƒë√£ ch·∫∑n DM t·ª´ bot
            return False
        except Exception as e:
            # L·ªói kh√°c (user kh√¥ng t·ªìn t·∫°i, v.v.)
            self.logger.warning(f"L·ªói khi ki·ªÉm tra DM cho user {user_id}: {e}")
            return False

    async def _send_dm_to_all_players(self, game, embed_func):
        """G·ª≠i DM cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i."""
        for player in game.players.values():
            try:
                user = await self.bot.fetch_user(player.id)
                embed = embed_func(game, player)
                await user.send(embed=embed)
            except Exception as e:
                self.logger.warning(f"Kh√¥ng th·ªÉ g·ª≠i DM cho user {player.id}: {e}")

    @commands.command(name="help")
    async def help_command(self, ctx: commands.Context):
        """Hi·ªÉn th·ªã b·∫£ng h∆∞·ªõng d·∫´n c√°c l·ªánh."""
        embed = discord.Embed(
            title="‚ô¶Ô∏è H∆∞·ªõng d·∫´n ch∆°i X√¨ D√°ch ‚ô•Ô∏è",
            description="D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c l·ªánh b·∫°n c√≥ th·ªÉ d√πng:",
            color=discord.Color.blue(),
        )

        embed.add_field(
            name=f"`{COMMAND_PREFIX}blackjack` ho·∫∑c `{COMMAND_PREFIX}bj`",
            value="B·∫Øt ƒë·∫ßu m·ªôt ph√≤ng ch·ªù m·ªõi ƒë·ªÉ m·ªçi ng∆∞·ªùi c√πng tham gia.",
            inline=False,
        )
        embed.add_field(
            name=f"`{COMMAND_PREFIX}join`",
            value="Tham gia v√†o ph√≤ng ch·ªù ƒëang m·ªü trong k√™nh n√†y.",
            inline=False,
        )
        embed.add_field(
            name=f"`{COMMAND_PREFIX}start`",
            value="B·∫Øt ƒë·∫ßu v√°n ƒë·∫•u. (Ch·ªâ ng∆∞·ªùi t·∫°o ph√≤ng ch·ªù m·ªõi d√πng ƒë∆∞·ª£c)",
            inline=False,
        )
        embed.add_field(
            name=f"`{COMMAND_PREFIX}hit`",
            value="R√∫t th√™m m·ªôt l√° b√†i khi ƒë·∫øn l∆∞·ª£t c·ªßa b·∫°n.",
            inline=False,
        )
        embed.add_field(
            name=f"`{COMMAND_PREFIX}stand`",
            value="D·∫±n b√†i, kh√¥ng r√∫t n·ªØa v√† k·∫øt th√∫c l∆∞·ª£t c·ªßa b·∫°n.",
            inline=False,
        )
        embed.add_field(
            name=f"`{COMMAND_PREFIX}end` ho·∫∑c `{COMMAND_PREFIX}stop`",
            value="Bu·ªôc k·∫øt th√∫c v√°n ch∆°i hi·ªán t·∫°i. (Ch·ªâ ng∆∞·ªùi t·∫°o ph√≤ng ho·∫∑c admin)",
            inline=False,
        )
        embed.set_footer(text="Ch√∫c b·∫°n ch∆°i game vui v·∫ª!")

        await ctx.send(embed=embed)

    @commands.command(name="blackjack", aliases=["bj"])
    async def blackjack(self, ctx: commands.Context):
        """B·∫Øt ƒë·∫ßu m·ªôt ph√≤ng ch·ªù game X√¨ D√°ch."""
        # Ki·ªÉm tra n·∫øu ƒë√£ c√≥ game ƒëang ch·ªù ho·∫∑c ƒëang ch∆°i ·ªü channel n√†y
        game = self.use_case.repo.get_game(ctx.channel.id)
        if game and game.state in (
            GameState.WAITING_FOR_PLAYERS,
            GameState.PLAYERS_TURN,
            GameState.DEALER_TURN,
        ):
            await ctx.send(
                "‚ùå ƒê√£ c√≥ m·ªôt ph√≤ng ch·ªù/game ƒëang di·ªÖn ra trong k√™nh n√†y. H√£y k·∫øt th√∫c v√°n hi·ªán t·∫°i tr∆∞·ªõc khi t·∫°o m·ªõi."
            )
            self.logger.warning(
                f"Channel {ctx.channel.id} ƒë√£ c√≥ game active, kh√¥ng t·∫°o m·ªõi."
            )
            return

        # Ki·ªÉm tra kh·∫£ nƒÉng g·ª≠i DM tr∆∞·ªõc khi t·∫°o ph√≤ng ch·ªù
        can_dm = await self._check_dm_permission(ctx.author.id)
        if not can_dm:
            await ctx.send(
                f"‚ùå {ctx.author.mention}, bot kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ri√™ng cho b·∫°n. "
                "Vui l√≤ng b·∫≠t DM t·ª´ server members trong c√†i ƒë·∫∑t Discord ƒë·ªÉ tham gia game."
            )
            self.logger.warning(
                f"User {ctx.author.id} kh√¥ng th·ªÉ nh·∫≠n DM, kh√¥ng cho ph√©p t·∫°o ph√≤ng ch·ªù."
            )
            return

        # N·∫øu kh√¥ng c√≥, t·∫°o ph√≤ng ch·ªù m·ªõi
        game, joined = self.use_case.join_game(
            ctx.channel.id, ctx.author.id, ctx.author.display_name
        )
        self.game_starters[ctx.channel.id] = ctx.author.id
        self.logger.info(
            f"T·∫°o ph√≤ng ch·ªù m·ªõi ·ªü channel {ctx.channel.id} b·ªüi user {ctx.author.id} ({ctx.author.display_name})"
        )
        embed = self.presenter.create_waiting_embed(game)
        await ctx.send(embed=embed)
        # await ctx.send(content="@here C√≥ ai ch∆°i X√¨ D√°ch kh√¥ng? V√†o l·∫π!", embed=embed)
        # T·∫°o task timeout n·∫øu ch∆∞a c√≥
        if ctx.channel.id not in self.waiting_room_timeouts:
            self.waiting_room_timeouts[ctx.channel.id] = asyncio.create_task(
                self._waiting_room_timeout(ctx.channel.id, ctx)
            )

    @commands.command(name="join")
    async def join(self, ctx: commands.Context):
        """Tham gia v√†o m·ªôt v√°n X√¨ D√°ch ƒëang ch·ªù."""
        try:
            # Ki·ªÉm tra kh·∫£ nƒÉng g·ª≠i DM tr∆∞·ªõc khi cho ph√©p join
            can_dm = await self._check_dm_permission(ctx.author.id)
            if not can_dm:
                await ctx.send(
                    f"‚ùå {ctx.author.mention}, bot kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ri√™ng cho b·∫°n. "
                    "Vui l√≤ng b·∫≠t DM t·ª´ server members trong c√†i ƒë·∫∑t Discord ƒë·ªÉ tham gia game."
                )
                self.logger.warning(
                    f"User {ctx.author.id} kh√¥ng th·ªÉ nh·∫≠n DM, kh√¥ng cho ph√©p join game."
                )
                return

            game, joined = self.use_case.join_game(
                ctx.channel.id, ctx.author.id, ctx.author.display_name
            )
            if joined:
                self.logger.info(
                    f"User {ctx.author.id} ({ctx.author.display_name}) join ph√≤ng ch·ªù channel {ctx.channel.id}"
                )
                await ctx.send(f"{ctx.author.display_name} ƒë√£ tham gia v√°n ƒë·∫•u!")
                embed = self.presenter.create_waiting_embed(game)
                await ctx.send(embed=embed)
                # N·∫øu c√≥ nhi·ªÅu h∆°n 1 ng∆∞·ªùi ch∆°i, h·ªßy timeout
                if (
                    ctx.channel.id in self.waiting_room_timeouts
                    and len(game.players) > 1
                ):
                    self.waiting_room_timeouts[ctx.channel.id].cancel()
                    del self.waiting_room_timeouts[ctx.channel.id]
            else:
                await ctx.send(
                    f"{ctx.author.display_name}, b·∫°n ƒë√£ ·ªü trong ph√≤ng ch·ªù r·ªìi."
                )
        except RuntimeError as e:
            self.logger.warning(
                f"User {ctx.author.id} join ph√≤ng ch·ªù channel {ctx.channel.id} l·ªói: {e}"
            )
            await ctx.send(f"L·ªói: {e}")

    @commands.command(name="start")
    async def start(self, ctx: commands.Context):
        """B·∫Øt ƒë·∫ßu v√°n ch∆°i v·ªõi nh·ªØng ng∆∞·ªùi ƒë√£ tham gia."""
        starter = self.game_starters.get(ctx.channel.id)
        if starter != ctx.author.id:
            await ctx.send("Ch·ªâ ng∆∞·ªùi t·∫°o ph√≤ng ch·ªù m·ªõi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu v√°n ƒë·∫•u.")
            self.logger.warning(
                f"User {ctx.author.id} c·ªë g·∫Øng start game ·ªü channel {ctx.channel.id} nh∆∞ng kh√¥ng ph·∫£i starter."
            )
            return

        game = self.use_case.repo.get_game(ctx.channel.id)
        if not game or not game.players:
            await ctx.send("Kh√¥ng c√≥ ai trong ph√≤ng ch·ªù ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
            self.logger.warning(
                f"Channel {ctx.channel.id} kh√¥ng c√≥ ai trong ph√≤ng ch·ªù khi start."
            )
            return

        if game.state != GameState.WAITING_FOR_PLAYERS:
            await ctx.send("V√°n ch∆°i ƒë√£ b·∫Øt ƒë·∫ßu r·ªìi.")
            self.logger.warning(
                f"Channel {ctx.channel.id} ƒë√£ start game khi game ƒë√£ ch·∫°y."
            )
            return

        players_data = {p.id: p.name for p in game.players.values()}
        game = self.use_case.start_new_game(ctx.channel.id, players_data)

        self.logger.info(
            f"Game b·∫Øt ƒë·∫ßu ·ªü channel {ctx.channel.id} v·ªõi {len(players_data)} ng∆∞·ªùi ch∆°i."
        )

        # Hi·ªÉn th·ªã tr·∫°ng th√°i tr√™n channel
        embed = self.presenter.create_channel_embed(game)
        await ctx.send(embed=embed)

        # G·ª≠i DM cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
        await self._send_dm_to_all_players(game, self.presenter.create_player_dm_embed)

        # N·∫øu game k·∫øt th√∫c ngay l·∫≠p t·ª©c (v√≠ d·ª•: m·ªçi ng∆∞·ªùi ƒë·ªÅu c√≥ blackjack)
        if game.state == GameState.GAME_OVER:
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng tr√™n channel
            final_embed = self.presenter.create_final_result_embed(game)
            await ctx.send(embed=final_embed)

            self.use_case.end_game(ctx.channel.id)
            if ctx.channel.id in self.game_starters:
                del self.game_starters[ctx.channel.id]
        # H·ªßy timeout n·∫øu c√≥
        if ctx.channel.id in self.waiting_room_timeouts:
            self.waiting_room_timeouts[ctx.channel.id].cancel()
            del self.waiting_room_timeouts[ctx.channel.id]

    @commands.command(name="hit")
    async def hit(self, ctx: commands.Context):
        """R√∫t th√™m m·ªôt l√° b√†i."""
        try:
            game = self.use_case.player_action(ctx.channel.id, ctx.author.id, "hit")

            # Hi·ªÉn th·ªã tr·∫°ng th√°i tr√™n channel
            embed = self.presenter.create_channel_embed(game)
            await ctx.send(embed=embed)

            # G·ª≠i DM cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
            await self._send_dm_to_all_players(
                game, self.presenter.create_player_dm_embed
            )

            if game.state == GameState.GAME_OVER:
                # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng tr√™n channel
                final_embed = self.presenter.create_final_result_embed(game)
                await ctx.send(embed=final_embed)

                self.use_case.end_game(ctx.channel.id)
                if ctx.channel.id in self.game_starters:
                    del self.game_starters[ctx.channel.id]

        except (ValueError, PermissionError) as e:
            await ctx.send(f"{ctx.author.mention}, {e}")

    @commands.command(name="stand")
    async def stand(self, ctx: commands.Context):
        """D·ª´ng, kh√¥ng r√∫t b√†i n·ªØa."""
        try:
            game = self.use_case.player_action(ctx.channel.id, ctx.author.id, "stand")

            # Hi·ªÉn th·ªã tr·∫°ng th√°i tr√™n channel
            embed = self.presenter.create_channel_embed(game)
            await ctx.send(embed=embed)

            # G·ª≠i DM cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
            await self._send_dm_to_all_players(
                game, self.presenter.create_player_dm_embed
            )

            if game.state == GameState.GAME_OVER:
                # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng tr√™n channel
                final_embed = self.presenter.create_final_result_embed(game)
                await ctx.send(embed=final_embed)

                self.use_case.end_game(ctx.channel.id)
                if ctx.channel.id in self.game_starters:
                    del self.game_starters[ctx.channel.id]

        except (ValueError, PermissionError) as e:
            await ctx.send(f"{ctx.author.mention}, {e}")

    @commands.command(name="end", aliases=["stop"])
    async def end_game_command(self, ctx: commands.Context):
        """Bu·ªôc k·∫øt th√∫c v√°n ch∆°i hi·ªán t·∫°i."""
        starter = self.game_starters.get(ctx.channel.id)
        # Cho ph√©p ng∆∞·ªùi t·∫°o ph√≤ng ho·∫∑c ng∆∞·ªùi c√≥ quy·ªÅn qu·∫£n l√Ω k√™nh k·∫øt th√∫c
        if starter == ctx.author.id or ctx.author.guild_permissions.manage_channels:
            self.use_case.end_game(ctx.channel.id)
            if ctx.channel.id in self.game_starters:
                del self.game_starters[ctx.channel.id]
            await ctx.send("ƒê√£ k·∫øt th√∫c v√°n ch∆°i hi·ªán t·∫°i.")
            self.logger.info(
                f"Game ·ªü channel {ctx.channel.id} ƒë√£ b·ªã k·∫øt th√∫c b·ªüi user {ctx.author.id} ({ctx.author.display_name})"
            )
            # H·ªßy timeout n·∫øu c√≥
            if ctx.channel.id in self.waiting_room_timeouts:
                self.waiting_room_timeouts[ctx.channel.id].cancel()
                del self.waiting_room_timeouts[ctx.channel.id]
        else:
            await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn k·∫øt th√∫c v√°n ch∆°i n√†y.")
            self.logger.warning(
                f"User {ctx.author.id} c·ªë g·∫Øng end game ·ªü channel {ctx.channel.id} nh∆∞ng kh√¥ng c√≥ quy·ªÅn."
            )
